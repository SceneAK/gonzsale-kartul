'use strict';
const Sequelize = require('sequelize');

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up({context: queryInterface}) {
    await queryInterface.createTable('images', {
      id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
      },
      path: {
        type: Sequelize.TEXT,
        allowNull: false,
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
    }, { engine: 'InnoDB' });

    await queryInterface.createTable('users', {
      id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
      },
      email: {
        type: Sequelize.STRING(320),
        allowNull: false,
        unique: true, 
      },
      password: {
        type: Sequelize.STRING(255),
        allowNull: true,
      },
      name: {
        type: Sequelize.STRING(35),
        allowNull: false,
      },
      phone: {
        type: Sequelize.STRING(15),
        allowNull: false,
      },
      role: {
        type: Sequelize.ENUM('USER', 'STORE_MANAGER', 'ADMIN'),
        allowNull: false,
        defaultValue: 'USER',
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      deleted_at: {
        type: Sequelize.DATE,
        allowNull: true,
      }
    }, { engine: 'InnoDB' });

    await queryInterface.removeIndex('users', 'users_email');
    await queryInterface.addIndex('users', ['email'], { name: 'users_email', unique: true });

    await queryInterface.createTable('stores', {
      id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
      },
      user_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'users', key: 'id' },
        onDelete: 'NO ACTION',
        onUpdate: 'CASCADE'
      },
      image_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'images', key: 'id' },
        onDelete: 'RESTRICT',
        onUpdate: 'CASCADE'
      },
      name: {
        type: Sequelize.STRING(35),
        allowNull: false,
      },
      description: {
        type: Sequelize.TEXT,
        allowNull: true,
      },
      qr_image_id: {
        type: Sequelize.CHAR(36),
        allowNull: true,
        references: { model: 'images', key: 'id' },
        onDelete: 'SET NULL',
        onUpdate: 'CASCADE'
      },
      bank_account: {
        type: Sequelize.STRING(16),
        allowNull: false,
      },
      bank_name: {
        type: Sequelize.STRING(10),
        allowNull: false,
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      deleted_at: {
        type: Sequelize.DATE,
        allowNull: true,
      }
    }, { engine: 'InnoDB' });

    await queryInterface.createTable('orders', {
      id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
      },
      customer_id: {
        type: Sequelize.CHAR(36),
        allowNull: true,
        references: { model: 'users', key: 'id' },
        onDelete: 'NO ACTION',
        onUpdate: 'CASCADE'
      },
      customer_name: {
        type: Sequelize.STRING(35),
        allowNull: false,
      },
      customer_email: {
        type: Sequelize.STRING(320),
        allowNull: true,
      },
      customer_phone: {
        type: Sequelize.STRING(15),
        allowNull: false,
      },
      store_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'stores', key: 'id' },
        onDelete: 'NO ACTION',
        onUpdate: 'CASCADE'
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      deleted_at: {
        type: Sequelize.DATE,
        allowNull: true,
      }
    }, { engine: 'InnoDB' });

    await queryInterface.createTable('products', {
      id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
      },
      store_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'stores', key: 'id' },
        onDelete: 'NO ACTION',
        onUpdate: 'CASCADE'
      },
      name: {
        type: Sequelize.STRING(150),
        allowNull: false,
      },
      description: {
        type: Sequelize.TEXT,
        allowNull: true,
      },
      category: {
        type: Sequelize.STRING(150),
        allowNull: false,
      },
      is_available: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      deleted_at: {
        type: Sequelize.DATE,
        allowNull: true,
      }
    }, { engine: 'InnoDB' });

    await queryInterface.createTable('variants', {
      id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
      },
      product_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'products', key: 'id' },
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE'
      },
      name: {
        type: Sequelize.STRING(50),
        allowNull: false,
      },
      stock: {
        type: Sequelize.INTEGER.UNSIGNED,
        allowNull: false,
      },
      price: {
        type: Sequelize.INTEGER.UNSIGNED,
        allowNull: false,
      },
      unit: {
        type: Sequelize.STRING(50),
        allowNull: false,
      },
      is_default: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: false,
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      deleted_at: {
        type: Sequelize.DATE,
        allowNull: true,
      }
    }, { engine: 'InnoDB' });
    
    await queryInterface.removeIndex('variants', 'composite');
    await queryInterface.addIndex('variants', ['product_id', 'name'], { unique: true, name: 'composite' });

    await queryInterface.createTable('order_items', {
      id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
      },
      order_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'orders', key: 'id' },
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE'
      },
      variant_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'variants', key: 'id' },
        onDelete: 'NO ACTION',
        onUpdate: 'CASCADE'
      },
      product_name: {
        type: Sequelize.STRING(150),
        allowNull: false,
      },
      product_description: {
        type: Sequelize.TEXT,
        allowNull: true,
      },
      variant_name: {
        type: Sequelize.STRING(50),
        allowNull: false,
      },
      variant_price: {
        type: Sequelize.INTEGER.UNSIGNED,
        allowNull: false,
      },
      variant_unit: {
        type: Sequelize.STRING(50),
        allowNull: false,
      },
      quantity: {
        type: Sequelize.INTEGER.UNSIGNED,
        allowNull: false,
      },
      notes: {
        type: Sequelize.TEXT,
        allowNull: true,
      },
      status: {
        type: Sequelize.ENUM('PENDING', 'READY', 'COMPLETED', 'CANCELLED'),
        allowNull: false,
        defaultValue: 'PENDING'
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      deleted_at: {
        type: Sequelize.DATE,
        allowNull: true,
      }
    }, { engine: 'InnoDB' });

    await queryInterface.createTable('product_images', {
      id: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        primaryKey: true,
      },
      image_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'images', key: 'id' },
        onDelete: 'RESTRICT',
        onUpdate: 'CASCADE'
      },
      product_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'products', key: 'id' },
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE'
      },
      priority: {
        type: Sequelize.SMALLINT,
        allowNull: false,
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      }
    }, { engine: 'InnoDB' });

    await queryInterface.createTable('transactions', {
      id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
      },
      order_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'orders', key: 'id' },
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE'
      },
      amount: {
        type: Sequelize.INTEGER.UNSIGNED,
        allowNull: false,
      },
      method: {
        type: Sequelize.ENUM('PROOF-BASED', 'CASH-ON-DELIVERY'),
        allowNull: false,
        defaultValue: 'PROOF-BASED',
      },
      type: {
        type: Sequelize.ENUM('PAYMENT', 'REFUND'),
        allowNull: false,
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      }
    }, { engine: 'InnoDB' });

    await queryInterface.createTable('proof_transactions', {
      transaction_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
        references: { model: 'transactions', key: 'id' },
        onDelete: 'NO ACTION',
        onUpdate: 'CASCADE'
      },
      proof_image_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        references: { model: 'images', key: 'id' },
        onDelete: 'RESTRICT',
        onUpdate: 'CASCADE'
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      }
    }, { engine: 'InnoDB' });

    await queryInterface.createTable('user_storages', {
      user_id: {
        type: Sequelize.CHAR(36),
        allowNull: false,
        primaryKey: true,
        references: { model: 'users', key: 'id' },
        onDelete: 'CASCADE',
        onUpdate: 'CASCADE'
      },
      used_storage: {
        type: Sequelize.INTEGER.UNSIGNED,
        allowNull: false,
        defaultValue: 0,
      },
      created_at: {
        type: Sequelize.DATE,
        allowNull: false,
      },
      updated_at: {
        type: Sequelize.DATE,
        allowNull: false,
      }
    }, { engine: 'InnoDB' });
  },

  async down({context: queryInterface}) {
    await queryInterface.dropTable('user_storages');
    await queryInterface.dropTable('proof_transactions');
    await queryInterface.dropTable('transactions');
    await queryInterface.dropTable('product_images');
    await queryInterface.dropTable('order_items');
    await queryInterface.dropTable('variants');
    await queryInterface.dropTable('products');
    await queryInterface.dropTable('orders');
    await queryInterface.dropTable('stores');
    await queryInterface.dropTable('users');
    await queryInterface.dropTable('images');
  }
};
