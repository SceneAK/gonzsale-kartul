'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `images` (`id` CHAR(36) BINARY NOT NULL , `path` TEXT NOT NULL, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `users` (`id` CHAR(36) BINARY NOT NULL , `email` VARCHAR(320) NOT NULL UNIQUE, `password` VARCHAR(255), `name` VARCHAR(35) NOT NULL, `phone` VARCHAR(15) NOT NULL, `role` ENUM('USER', 'STORE_MANAGER', 'ADMIN') NOT NULL DEFAULT 'USER', `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, `deleted_at` DATETIME, PRIMARY KEY (`id`)) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("ALTER TABLE `users` ADD UNIQUE INDEX `users_email` (`email`);");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `stores` (`id` CHAR(36) BINARY NOT NULL , `user_id` CHAR(36) BINARY NOT NULL, `image_id` CHAR(36) BINARY NOT NULL, `name` VARCHAR(35) NOT NULL, `description` TEXT, `qr_image_id` CHAR(36) BINARY, `bank_account` VARCHAR(16) NOT NULL, `bank_name` VARCHAR(10) NOT NULL, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, `deleted_at` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, FOREIGN KEY (`image_id`) REFERENCES `images` (`id`) ON DELETE RESTRICT ON UPDATE CASCADE, FOREIGN KEY (`qr_image_id`) REFERENCES `images` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `orders` (`id` CHAR(36) BINARY NOT NULL , `customer_id` CHAR(36) BINARY, `customer_name` VARCHAR(35) NOT NULL, `customer_email` VARCHAR(320), `customer_phone` VARCHAR(15) NOT NULL, `store_id` CHAR(36) BINARY NOT NULL, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, `deleted_at` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`customer_id`) REFERENCES `users` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, FOREIGN KEY (`store_id`) REFERENCES `stores` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `products` (`id` CHAR(36) BINARY NOT NULL , `store_id` CHAR(36) BINARY NOT NULL, `name` VARCHAR(150) NOT NULL, `description` TEXT, `category` VARCHAR(150) NOT NULL, `is_available` TINYINT(1) NOT NULL DEFAULT false, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, `deleted_at` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`store_id`) REFERENCES `stores` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `variants` (`id` CHAR(36) BINARY , `product_id` CHAR(36) BINARY NOT NULL, `name` VARCHAR(50) NOT NULL, `stock` INTEGER UNSIGNED NOT NULL, `price` INTEGER UNSIGNED NOT NULL, `unit` VARCHAR(50) NOT NULL, `is_default` TINYINT(1) NOT NULL DEFAULT false, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, `deleted_at` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`product_id`) REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("ALTER TABLE `variants` ADD UNIQUE INDEX `composite` (`product_id`, `name`);");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `order_items` (`id` CHAR(36) BINARY NOT NULL , `order_id` CHAR(36) BINARY NOT NULL, `variant_id` CHAR(36) BINARY NOT NULL, `product_name` VARCHAR(150) NOT NULL, `product_description` TEXT, `variant_name` VARCHAR(50) NOT NULL, `variant_price` INTEGER UNSIGNED NOT NULL, `variant_unit` VARCHAR(50) NOT NULL, `quantity` INTEGER UNSIGNED NOT NULL, `notes` TEXT, `status` ENUM('PENDING', 'READY', 'COMPLETED', 'CANCELLED') NOT NULL DEFAULT 'PENDING', `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, `deleted_at` DATETIME, PRIMARY KEY (`id`), FOREIGN KEY (`order_id`) REFERENCES `orders` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`variant_id`) REFERENCES `variants` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `product_images` (`id` INTEGER auto_increment , `image_id` CHAR(36) BINARY NOT NULL, `product_id` CHAR(36) BINARY NOT NULL, `priority` SMALLINT NOT NULL, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`image_id`) REFERENCES `images` (`id`) ON DELETE RESTRICT ON UPDATE CASCADE, FOREIGN KEY (`product_id`) REFERENCES `products` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `transactions` (`id` CHAR(36) BINARY NOT NULL , `order_id` CHAR(36) BINARY NOT NULL, `amount` INTEGER UNSIGNED NOT NULL, `method` ENUM('PROOF-BASED', 'CASH-ON-DELIVERY') NOT NULL DEFAULT 'PROOF-BASED', `type` ENUM('PAYMENT', 'REFUND') NOT NULL, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`order_id`) REFERENCES `orders` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `proof_transactions` (`transaction_id` CHAR(36) BINARY NOT NULL , `proof_image_id` CHAR(36) BINARY NOT NULL, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, PRIMARY KEY (`transaction_id`), FOREIGN KEY (`transaction_id`) REFERENCES `transactions` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE, FOREIGN KEY (`proof_image_id`) REFERENCES `images` (`id`) ON DELETE RESTRICT ON UPDATE CASCADE) ENGINE=InnoDB;");
    await queryInterface.sequelize.query("CREATE TABLE IF NOT EXISTS `user_storages` (`user_id` CHAR(36) BINARY NOT NULL , `used_storage` INTEGER UNSIGNED NOT NULL DEFAULT 0, `created_at` DATETIME NOT NULL, `updated_at` DATETIME NOT NULL, PRIMARY KEY (`user_id`), FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;");
  },

  async down (queryInterface, Sequelize) {
    
    await queryInterface.dropAllTables();
    await queryInterface.sequelize.query('SET FOREIGN_KEY_CHECKS = 1;');
  }
};